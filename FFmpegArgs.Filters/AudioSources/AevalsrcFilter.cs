/*
aevalsrc AVOptions:
  exprs             <string>     ..F.A...... set the '|'-separated list of channels expressions
  nb_samples        <int>        ..F.A...... set the number of samples per requested frame (from 0 to INT_MAX) (default 1024)
  n                 <int>        ..F.A...... set the number of samples per requested frame (from 0 to INT_MAX) (default 1024)
  sample_rate       <string>     ..F.A...... set the sample rate (default "44100")
  s                 <string>     ..F.A...... set the sample rate (default "44100")
  duration          <duration>   ..F.A...... set audio duration (default -0.000001)
  d                 <duration>   ..F.A...... set audio duration (default -0.000001)
  channel_layout    <string>     ..F.A...... set channel layout
  c                 <string>     ..F.A...... set channel layout
 */
namespace FFmpegArgs.Filters.AudioSources
{
    /// <summary>
    ///  ... aevalsrc          |->A       Generate an audio signal generated by an expression.<br>
    ///  </br><see href="https://ffmpeg.org/ffmpeg-filters.html#aevalsrc"/>
    /// </summary>
    public class AevalsrcFilter : SourceAudioFilter
    {
        static readonly IEnumerable<string> _variables = new List<string>()
        {
            "n","t","s"
        };
        readonly FFmpegExpression expression = new FFmpegExpression(_variables);
        internal AevalsrcFilter(IAudioFilterGraph filterGraph) : base("aevalsrc", filterGraph)
        {
            AddMapOut();
        }
        /// <summary>
        /// Set the ’|’-separated expressions list for each separate channel. In case the channel_layout option is not specified, the selected channel layout depends on the number of provided expressions. Otherwise the last specified expression is applied to the remaining output channels.
        /// </summary>
        /// <param name="exprs"></param>
        /// <returns></returns>
        public AevalsrcFilter Exprs(params string[] exprs)
          => this.SetOption("exprs", string.Join("|", exprs.Select(x => x.Expression().Run(expression).ToString())));
        /// <summary>
        /// Set the ’|’-separated expressions list for each separate channel. In case the channel_layout option is not specified, the selected channel layout depends on the number of provided expressions. Otherwise the last specified expression is applied to the remaining output channels.
        /// </summary>
        /// <param name="exprs"></param>
        /// <returns></returns>
        public AevalsrcFilter Exprs(params Action<FFmpegExpression>[] exprs)
          => this.SetOption("exprs", string.Join("|", exprs.Select(x => x.Run(expression).ToString())));
        // #NeedMoreInfo
        /// <summary>
        /// Set the channel layout. The number of channels in the specified layout must be equal to the number of specified expressions.
        /// <br></br>Need more info
        /// </summary>
        /// <param name="c"></param>
        /// <returns></returns>
        public AevalsrcFilter ChannelLayout(string c)
          => this.SetOption("c", c);
        /// <summary>
        /// Set the minimum duration of the sourced audio.<br>
        /// </br> Note that the resulting duration may be greater than the specified duration, as the generated audio is always cut at the end of a complete frame.
        /// If not specified, or the expressed duration is negative, the audio is supposed to be generated forever.
        /// </summary>
        /// <param name="duration">seconds</param>
        /// <returns></returns>
        public AevalsrcFilter Duration(TimeSpan duration)
          => this.SetOptionRange("d", duration, TimeSpan.Zero, TimeSpan.MaxValue);
        /// <summary>
        /// Set the number of samples per channel per each output frame, default to 1024.
        /// </summary>
        /// <param name="n"></param>
        /// <returns></returns>
        public AevalsrcFilter NbSamples(int n)
          => this.SetOptionRange("n", n, 0, INT_MAX);
        /// <summary>
        /// Specify the sample rate, default to 44100.
        /// </summary>
        /// <param name="s"></param>
        /// <returns></returns>
        public AevalsrcFilter SampleRate(int s)
          => this.SetOptionRange("s", s, 0, INT_MAX);
    }
    /// <summary>
    /// 
    /// </summary>
    public static class AevalsrcFilterExtensions
    {
        /// <summary>
        /// Generate an audio signal specified by an expression.<br></br>
        /// This source accepts in input one or more expressions(one for each channel), which are evaluated and used to generate a corresponding audio signal.<br>
        /// </br><see href="https://ffmpeg.org/ffmpeg-filters.html#aevalsrc"/>
        /// </summary>
        /// <param name="filterGraph"></param>
        /// <returns></returns>
        public static AevalsrcFilter AevalsrcFilter(this IAudioFilterGraph filterGraph) => new AevalsrcFilter(filterGraph);
    }
}
