/*
astats AVOptions:
  length            <double>     ..F.A...... set the window length (from 0.01 to 10) (default 0.05)
  metadata          <boolean>    ..F.A...... inject metadata in the filtergraph (default false)
  reset             <int>        ..F.A...... recalculate stats after this many frames (from 0 to INT_MAX) (default 0)
  measure_perchannel <flags>      ..F.A...... only measure_perchannel these per-channel statistics (default all+DC_offset+Min_level+Max_level+Min_difference+Max_difference+Mean_difference+RMS_difference+Peak_level+RMS_level+RMS_peak+RMS_trough+Crest_factor+Flat_factor+Peak_count+Bit_depth+Dynamic_range+Zero_crossings+Zero_crossings_rate+Noise_floor+Noise_floor_count+Number_of_samples+Number_of_NaNs+Number_of_Infs+Number_of_denormals)
     none                         ..F.A...... 
     all                          ..F.A...... 
     DC_offset                    ..F.A...... 
     Min_level                    ..F.A...... 
     Max_level                    ..F.A...... 
     Min_difference               ..F.A...... 
     Max_difference               ..F.A...... 
     Mean_difference              ..F.A...... 
     RMS_difference               ..F.A...... 
     Peak_level                   ..F.A...... 
     RMS_level                    ..F.A...... 
     RMS_peak                     ..F.A...... 
     RMS_trough                   ..F.A...... 
     Crest_factor                 ..F.A...... 
     Flat_factor                  ..F.A...... 
     Peak_count                   ..F.A...... 
     Bit_depth                    ..F.A...... 
     Dynamic_range                ..F.A...... 
     Zero_crossings               ..F.A...... 
     Zero_crossings_rate              ..F.A...... 
     Noise_floor                  ..F.A...... 
     Noise_floor_count              ..F.A...... 
     Number_of_samples              ..F.A...... 
     Number_of_NaNs               ..F.A...... 
     Number_of_Infs               ..F.A...... 
     Number_of_denormals              ..F.A...... 
  measure_overall   <flags>      ..F.A...... only measure_perchannel these overall statistics (default all+DC_offset+Min_level+Max_level+Min_difference+Max_difference+Mean_difference+RMS_difference+Peak_level+RMS_level+RMS_peak+RMS_trough+Crest_factor+Flat_factor+Peak_count+Bit_depth+Dynamic_range+Zero_crossings+Zero_crossings_rate+Noise_floor+Noise_floor_count+Number_of_samples+Number_of_NaNs+Number_of_Infs+Number_of_denormals)
     none                         ..F.A...... 
     all                          ..F.A...... 
     DC_offset                    ..F.A...... 
     Min_level                    ..F.A...... 
     Max_level                    ..F.A...... 
     Min_difference               ..F.A...... 
     Max_difference               ..F.A...... 
     Mean_difference              ..F.A...... 
     RMS_difference               ..F.A...... 
     Peak_level                   ..F.A...... 
     RMS_level                    ..F.A...... 
     RMS_peak                     ..F.A...... 
     RMS_trough                   ..F.A...... 
     Crest_factor                 ..F.A...... 
     Flat_factor                  ..F.A...... 
     Peak_count                   ..F.A...... 
     Bit_depth                    ..F.A...... 
     Dynamic_range                ..F.A...... 
     Zero_crossings               ..F.A...... 
     Zero_crossings_rate              ..F.A...... 
     Noise_floor                  ..F.A...... 
     Noise_floor_count              ..F.A...... 
     Number_of_samples              ..F.A...... 
     Number_of_NaNs               ..F.A...... 
     Number_of_Infs               ..F.A...... 
     Number_of_denormals              ..F.A...... 
*/
namespace FFmpegArgs.Filters.AudioFilters
{
    /// <summary>
    ///  .S. astats            A->A       Show time domain statistics about audio frames.<br></br>
    /// <see href="https://ffmpeg.org/ffmpeg-filters.html#astats-1"/>
    /// </summary>
    public class AstatsFilter : AudioToAudioFilter, ISliceThreading
    {
        internal AstatsFilter(AudioMap audioMap) : base("astats", audioMap)
        {
            AddMapOut();
        }
        /// <summary>
        /// set the window length (from 0.01 to 10) (default 0.05)
        /// </summary>
        /// <param name="length"></param>
        /// <returns></returns>
        public AstatsFilter Length(double length)
            => this.SetOptionRange("length", length, 0.01, 10);

        /// <summary>
        /// inject metadata in the filtergraph (default false)
        /// </summary>
        /// <param name="metadata"></param>
        /// <returns></returns>
        public AstatsFilter Metadata(bool metadata)
            => this.SetOption("metadata", metadata.ToFFmpegFlag());

        /// <summary>
        /// recalculate stats after this many frames (from 0 to INT_MAX) (default 0)
        /// </summary>
        /// <param name="reset"></param>
        /// <returns></returns>
        public AstatsFilter Reset(int reset)
            => this.SetOptionRange("reset", reset, 0, INT_MAX);

        /// <summary>
        /// only measure_perchannel these per-channel statistics (default all+DC_offset+Min_level+Max_level+Min_difference+Max_difference+Mean_difference+RMS_difference+Peak_level+RMS_level+RMS_peak+RMS_trough+Crest_factor+Flat_factor+Peak_count+Bit_depth+Dynamic_range+Zero_crossings+Zero_crossings_rate+Noise_floor+Noise_floor_count+Number_of_samples+Number_of_NaNs+Number_of_Infs+Number_of_denormals)
        /// </summary>
        /// <param name="measure_perchannel"></param>
        /// <returns></returns>
        public AstatsFilter MeasurePerchannel(AstatsFlags measure_perchannel)
            => this.SetOption("measure_perchannel", measure_perchannel);

        /// <summary>
        /// only measure_perchannel these overall statistics (default all+DC_offset+Min_level+Max_level+Min_difference+Max_difference+Mean_difference+RMS_difference+Peak_level+RMS_level+RMS_peak+RMS_trough+Crest_factor+Flat_factor+Peak_count+Bit_depth+Dynamic_range+Zero_crossings+Zero_crossings_rate+Noise_floor+Noise_floor_count+Number_of_samples+Number_of_NaNs+Number_of_Infs+Number_of_denormals)
        /// </summary>
        /// <param name="measure_overall"></param>
        /// <returns></returns>
        public AstatsFilter MeasureOverall(AstatsFlags measure_overall)
            => this.SetOption("measure_overall", measure_overall);
    }
    /// <summary>
    /// 
    /// </summary>
    public static class AstatsExtensions
    {
        /// <summary>
        /// Display time domain statistical information about the audio channels. Statistics are calculated and displayed for each audio channel and, where applicable, an overall figure is also given.<br>
        /// </br><see href="https://ffmpeg.org/ffmpeg-filters.html#astats-1"/>
        /// </summary>
        public static AstatsFilter Astats(this AudioMap audioMap)
          => new AstatsFilter(audioMap);
    }

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member
    public enum AstatsFlags
    {
        none,
        all,
        DC_offset,
        Min_level,
        Max_level,
        Min_difference,
        Max_difference,
        Mean_difference,
        RMS_difference,
        Peak_level,
        RMS_level,
        RMS_peak,
        RMS_trough,
        Crest_factor,
        Flat_factor,
        Peak_count,
        Bit_depth,
        Dynamic_range,
        Zero_crossings,
        Zero_crossings_rate,
        Noise_floor,
        Noise_floor_count,
        Number_of_samples,
        Number_of_NaNs,
        Number_of_Infs,
        Number_of_denormals
    }
#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member
}
